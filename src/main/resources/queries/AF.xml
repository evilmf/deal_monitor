<?xml version="1.0" encoding="UTF-8"?>
<entity-mappings version="2.0"
	xmlns="http://java.sun.com/xml/ns/persistence/orm" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://java.sun.com/xml/ns/persistence/orm http://java.sun.com/xml/ns/persistence/orm_2_0.xsd">

	<named-query name="getBrandByName">
		<query><![CDATA[from Brand where name = :name]]></query>
	</named-query>

	<named-query name="getGenderByName">
		<query><![CDATA[from Gender where name = :name]]></query>
	</named-query>

	<named-query name="getCategoryByName">
		<query><![CDATA[from Category where name = :name]]></query>
	</named-query>

	<named-query name="getProductByProdIdAndBrand">
		<query><![CDATA[from Product where productId in (:productIds) and brand = :brand]]></query>
	</named-query>
	
	<named-query name="getProductByBrand">
		<query><![CDATA[from Product where brand = :brand]]></query>
	</named-query>

	<named-query name="getImages">
		<query><![CDATA[from Image]]></query>
	</named-query>
	
	<named-query name="getBrands">
		<query><![CDATA[from Brand]]></query>
	</named-query>
	
	<named-query name="getGenders">
		<query><![CDATA[from Gender]]></query>
	</named-query>
	
	<named-query name="getCategories">
		<query><![CDATA[from Category]]></query>
	</named-query>
	
	<named-query name="getLatestSnapshotDetail">
		<query><![CDATA[from Snapshot order by id desc]]></query>
	</named-query>

	<named-native-query name="getCurrentSnapshotByBrand">
		<query><![CDATA[select 
							id,
							product_id,
							price_regular,
							price_discount,
							snapshot_id,
							is_active,
							create_date,
							rank
						from (
							select
							sd.*,
							row_number() over (partition by sd.product_id order by sd.id desc) rank
							from snapshot_detail sd
							join products p on p.id = sd.product_id
							where brand_id = :brandId
						) t where rank = 1 and is_active = true]]></query>
	</named-native-query>
	
	<named-native-query name="getCurrentSnapshot">
		<query><![CDATA[select 
							id,
							product_id,
							price_regular,
							price_discount,
							snapshot_id,
							is_active,
							create_date,
							rank
						from (
							select
							sd.*,
							row_number() over (partition by sd.product_id order by sd.id desc) rank
							from snapshot_detail sd
							join products p on p.id = sd.product_id
						) t where rank = 1 and is_active = true]]></query>
	</named-native-query>

	<named-native-query name="getNextSnapshotId">
		<query><![CDATA[select nextval('seq_snapshot_id')]]></query>
	</named-native-query>

	<named-native-query name="getMissingSnapshotId">
		<query><![CDATA[select 
						distinct sd.snapshot_id
						from snapshot_detail sd
						left join snapshots s on s.id = sd.snapshot_id
						where s.id is null and sd.snapshot_id <= :sid]]></query>
	</named-native-query>

	<named-native-query name="getSnapshotBySid">
		<query><![CDATA[with snapshot_detail_tmp as (
							select sd.* from (
								select
								sd.*,
								row_number() over (partition by product_id order by id desc) rank
								from snapshot_detail sd
								where snapshot_id <= :sid
							) sd where sd.rank = 1 and sd.is_active = true
						)
						select
						sd.id, p.id product_id, p.product_id product_data_id, p.create_date product_create_date,
						p.brand_id, b.name brand, p.gender_id, g.name gender, p.category_id, c.name category,
						sd.snapshot_id, sd.price_regular, sd.price_discount, round((sd.price_regular - sd.price_discount) / sd.price_regular, 2) discount, 
						case when sd.snapshot_id = :sid then true else false end is_new,
						sd.create_date sd_create_date, p.url prod_url, p.name prod_name, i.url img_url
						from snapshot_detail_tmp sd
						join products p on p.id = sd.product_id and p.is_active = true
						join brands b on b.id = p.brand_id and b.is_active = true
						join genders g on g.id = p.gender_id and g.is_active = true
						join categories c on c.id = p.category_id and c.is_active = true
						left join images i on i.product_id = p.id
						order by sd.id desc]]></query>
	</named-native-query>
	
	<named-native-query name="searchProductByName">
		<query><![CDATA[select distinct
						p.id, 
						p.name product_name, 
						b.name brand_name, 
						g.name gender_name, 
						c.name category_name, 
						i.url image_url,
						min(sd.price_discount) over (partition by p.id) min_price,
						max(sd.price_discount) over (partition by p.id) max_price, 
						count(p.id) over (partition by p.id) count,
						ts_rank(name_tsvector, plainto_tsquery('simple', ?)) ts_rank
						from products p 
						join snapshot_detail sd on sd.product_id = p.id
						join brands b on b.id = p.brand_id
						join categories c on c.id = p.category_id
						join images i on i.product_id = p.id
						join genders g on g.id = p.gender_id
						where name_tsvector @@ to_tsquery('simple', ?) 
						and sd.is_active = true]]></query>
	</named-native-query>
	
	<named-native-query name="getSnapshotListByProductId">
		<query><![CDATA[with active_snapshot as (
											select 
											sd.*,
											row_number() over (partition by product_id order by create_date) rank
											from snapshot_detail sd
											where sd.product_id = :product_id
											and sd.is_active = true
										),
										inactive_snapshot as (
											select 
											sd.*,
											row_number() over (partition by product_id order by create_date) rank
											from snapshot_detail sd
											where sd.product_id = :product_id
											and sd.is_active = false
										)
										select
										ass.snapshot_id,
										ass.product_id,
										p.name,
										b.id brand_id,
										b.name brand_name,
										g.id gender_id,
										g.name gender_name,
										c.id category_id,
										c.name category_name,
										ass.price_discount price,
										ass.create_date active_date,
										iss.create_date inactive_date,
										EXTRACT(EPOCH FROM iss.create_date - ass.create_date) duration
										from active_snapshot ass
										left join inactive_snapshot iss on iss.rank = ass.rank
										join products p on p.id = ass.product_id
										join brands b on b.id = p.brand_id
										join genders g on g.id = p.gender_id
										join categories c on c.id = p.category_id 
										order by snapshot_id
		]]></query>
	</named-native-query>
	
	<named-native-query name="updateProductUrlById">
		<query><![CDATA[update products set url = :product_url where id = :product_id
		]]></query>
	</named-native-query>
</entity-mappings>
